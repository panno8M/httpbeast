Request	httpbeast.html#Request	httpbeast: Request	
OnRequest	httpbeast.html#OnRequest	httpbeast: OnRequest	
Settings	httpbeast.html#Settings	httpbeast: Settings	
HttpBeastDefect	httpbeast.html#HttpBeastDefect	httpbeast: HttpBeastDefect	
initSettings	httpbeast.html#initSettings,Port,string,int	httpbeast: initSettings(port: Port = Port(8080); bindAddr: string = &quot;&quot;;\n             numThreads: int = 0; domain = Domain.AF_INET; reusePort = true): Settings	
unsafeSend	httpbeast.html#unsafeSend,Request,string	httpbeast: unsafeSend(req: Request; data: string)	
send	httpbeast.html#send,Request,HttpCode,string,HttpHeaders	httpbeast: send(req: Request; code: HttpCode; body: string; headers: HttpHeaders)	
send	httpbeast.html#send,Request,HttpCode	httpbeast: send(req: Request; code: HttpCode)	
send	httpbeast.html#send,Request,string	httpbeast: send(req: Request; body: string; code = Http200)	
httpMethod	httpbeast.html#httpMethod,Request	httpbeast: httpMethod(req: Request): Option[HttpMethod]	
path	httpbeast.html#path,Request	httpbeast: path(req: Request): Option[string]	
headers	httpbeast.html#headers,Request	httpbeast: headers(req: Request): Option[HttpHeaders]	
body	httpbeast.html#body,Request	httpbeast: body(req: Request): Option[string]	
ip	httpbeast.html#ip,Request	httpbeast: ip(req: Request): string	
forget	httpbeast.html#forget,Request	httpbeast: forget(req: Request)	
run	httpbeast.html#run,OnRequest,Settings	httpbeast: run(onRequest: OnRequest; settings: Settings)	
run	httpbeast.html#run,OnRequest	httpbeast: run(onRequest: OnRequest)	
